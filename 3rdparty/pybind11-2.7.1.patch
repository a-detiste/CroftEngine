diff -ur pybind11-2.7.1-orig/include/pybind11/pytypes.h pybind11-2.7.1/include/pybind11/pytypes.h
--- pybind11-2.7.1-orig/include/pybind11/pytypes.h	2021-08-03 21:20:50.000000000 +0200
+++ pybind11-2.7.1/include/pybind11/pytypes.h	2021-09-01 07:17:03.132689300 +0200
@@ -1191,7 +1191,7 @@
 // unsigned type: (A)-1 != (B)-1 when A and B are unsigned types of different sizes).
 template <typename Unsigned>
 Unsigned as_unsigned(PyObject *o) {
-    if (sizeof(Unsigned) <= sizeof(unsigned long)
+    if constexpr(sizeof(Unsigned) <= sizeof(unsigned long)
 #if PY_VERSION_HEX < 0x03000000
             || PyInt_Check(o)
 #endif
@@ -1212,13 +1212,13 @@
     template <typename T,
               detail::enable_if_t<std::is_integral<T>::value, int> = 0>
     int_(T value) {
-        if (sizeof(T) <= sizeof(long)) {
-            if (std::is_signed<T>::value)
+        if constexpr(sizeof(T) <= sizeof(long)) {
+            if constexpr(std::is_signed<T>::value)
                 m_ptr = PyLong_FromLong((long) value);
             else
                 m_ptr = PyLong_FromUnsignedLong((unsigned long) value);
         } else {
-            if (std::is_signed<T>::value)
+            if constexpr(std::is_signed<T>::value)
                 m_ptr = PyLong_FromLongLong((long long) value);
             else
                 m_ptr = PyLong_FromUnsignedLongLong((unsigned long long) value);

diff -ur pybind11-2.7.1-orig/include/pybind11/cast.h pybind11-2.7.1/include/pybind11/cast.h
--- pybind11-2.7.1-orig/include/pybind11/cast.h	2021-08-03 21:20:50.000000000 +0200
+++ pybind11-2.7.1/include/pybind11/cast.h	2021-09-01 07:17:03.132689300 +0200
@@ -384,7 +384,7 @@
 
         const auto *buffer = reinterpret_cast<const CharT *>(PYBIND11_BYTES_AS_STRING(utfNbytes.ptr()));
         size_t length = (size_t) PYBIND11_BYTES_SIZE(utfNbytes.ptr()) / sizeof(CharT);
-        if (UTF_N > 8) { buffer++; length--; } // Skip BOM for UTF-16/32
+        if constexpr(UTF_N > 8) { buffer++; length--; } // Skip BOM for UTF-16/32
         value = StringType(buffer, length);
 
         // If we're loading a string_view we need to keep the encoded Python object alive:
